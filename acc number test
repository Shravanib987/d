"C:\Program Files\Python3913\python.exe" C:/Users/u5hn/AppData/Roaming/JetBrains/IntelliJIdea2023.1/plugins/python/helpers/pycharm/_jb_pytest_runner.py --target managed_account_validation_test.py::TestManagedAccountValidation.test_not_managed_account 
Testing started at 3:15 PM ...
Launching pytest with arguments managed_account_validation_test.py::TestManagedAccountValidation::test_not_managed_account --no-header --no-summary -q in C:\Repos\nat-processor.lambda\tests\validation

============================= test session starts =============================
collecting ... collected 1 item

managed_account_validation_test.py::TestManagedAccountValidation::test_not_managed_account 

============================== 1 failed in 1.04s ==============================
FAILED [100%]{"timestamp": "2023-10-02 15:15:31,909.909", "module": "[managed_accounts_service.retrieve_managed_accounts:24  ]", "level": "ERROR   ", "message": "Failed to get managed account details with code 404 and message []"}
{"timestamp": "2023-10-02 15:15:31,910.910", "module": "[managed_account_validation.validating_account_managed:13  ]", "level": "INFO    ", "message": "Unable to determine account type due to service failure. Moving on to the next validation."}

managed_account_validation_test.py:41 (TestManagedAccountValidation.test_not_managed_account)
self = <tests.validation.managed_account_validation_test.TestManagedAccountValidation testMethod=test_not_managed_account>
mock_post = <MagicMock name='post' id='1802199894960'>
mock_retrieve_oauth_token = <MagicMock name='retrieve_oauth_token' id='1802200033840'>
mock_retrieve_vg_session_token = <MagicMock name='retrieve_vg_session_token' id='1802200049984'>

    @patch.object(VGSessionService, 'retrieve_vg_session_token', return_value=vg_session_token)
    @patch.object(OAuthService, 'retrieve_oauth_token', return_value=oauth_token)
    @patch.object(requests, 'post',  return_value=MockResponse([], 404))
    def test_not_managed_account(self, mock_post, mock_retrieve_oauth_token, mock_retrieve_vg_session_token):
        answer_file = {"brokerageAccount": {"accountId": '889400030162730'}}
        ManagedAccountValidation.validating_account_managed(answer_file, stp_data)
>       self.assertTrue(stp_data['is_stp_eligible'])
E       AssertionError: False is not true

managed_account_validation_test.py:48: AssertionError

Process finished with exit code 1
