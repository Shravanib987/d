from util.logging_util import LOGGER
from service.managed_accounts_service import ManagedAccountsService


class ManagedAccountValidation:
    @staticmethod
    def validating_account_managed(answer_file, stp_data):
        account_Id = answer_file['brokerageAccount']['accountId']
        response_data = ManagedAccountsService.retrieve_managed_accounts(account_Id)
        if response_data[0].get('accountManagementType') == 'MANAGED':
            if response_data is None:
                stp_data['is_stp_eligible'] = False
                stp_data['message'] = stp_data['message'] + "\nUnable to determine account type due to service failure. Moving on to the next validation."
                LOGGER.info('Unable to determine account type due to service failure. Moving on to the next validation. , set message: ' + stp_data['message'])
                return
            else
                stp_data['is_stp_eligible'] = False
                stp_data['message'] = stp_data['message'] + "\nVanguard Account is Managed. STP Automation is out of scope. Sending to Manual Queue."
                LOGGER.info('Vanguard Account is Managed. STP Automation is out of scope. Sending to Manual Queue. , set message: ' + stp_data['message'])
        else:
            LOGGER.info("Vanguard Account is not Managed. Continuing to the next validation.")



Please correct the below test cases with respect to the above code


from unittest import TestCase
from unittest.mock import patch
from src.service.managed_accounts_service import requests
from src.service.managed_accounts_service import VGSessionService
from src.service.managed_accounts_service import OAuthService
from tests.service.mock_response import MockResponse
from validation.managed_account_validation import ManagedAccountValidation


vg_session_token = "VGSESSION"
oauth_token = "OAUTHTOKEN"

stp_data = {
    "message": "",
    "is_stp_eligible": True
}

class TestManagedAccountValidation(TestCase):
    def setUp(self):
        stp_data["message"] = ""
        stp_data["is_stp_eligible"] = True

    @patch.object(VGSessionService, 'retrieve_vg_session_token', return_value=vg_session_token)
    @patch.object(OAuthService, 'retrieve_oauth_token', return_value=oauth_token)
    @patch.object(requests, 'post', return_value=MockResponse([{"accountManagementType": "MANAGED"}], 200))
    def test_managed_account(self, mock_post, mock_retrieve_oauth_token, mock_retrieve_vg_session_token):
        answer_file = {"brokerageAccount": {"accountId": "889400030162730"}}
        ManagedAccountValidation.validating_account_managed(answer_file, stp_data)
        self.assertFalse(stp_data['is_stp_eligible'])
        self.assertIn("\nVanguard Account is Managed. STP Automation is out of scope. Sending to Manual Queue.", stp_data['message'])
        mock_post.assert_called_once()

    @patch.object(VGSessionService, 'retrieve_vg_session_token', return_value=vg_session_token)
    @patch.object(OAuthService, 'retrieve_oauth_token', return_value=oauth_token)
    @patch.object(requests, 'post', side_effect=Exception("Service call failed"))
    def test_service_call_failure(self, mock_post, mock_retrieve_oauth_token, mock_retrieve_vg_session_token):
        answer_file = {"brokerageAccount": {"accountId": '889400030162730'}}
        ManagedAccountValidation.validating_account_managed(answer_file, stp_data)
        self.assertFalse(stp_data['is_stp_eligible'])
        self.assertIn("\nUnable to determine account type due to service failure. Moving on to the next validation.", stp_data['message'])
        mock_post.assert_called_once()

    @patch.object(VGSessionService, 'retrieve_vg_session_token', return_value=vg_session_token)
    @patch.object(OAuthService, 'retrieve_oauth_token', return_value=oauth_token)
    @patch.object(requests, 'post', return_value=MockResponse([{"accountManagementType": ''}], 200))
    def test_not_managed_account(self, mock_post, mock_retrieve_oauth_token, mock_retrieve_vg_session_token):
        answer_file = {"brokerageAccount": {"accountId": '889400030162730'}}
        ManagedAccountValidation.validating_account_managed(answer_file, stp_data)
        self.assertTrue(stp_data["is_stp_eligible"])
        self.assertEqual(stp_data["message"], "")
        mock_post.assert_called_once()
